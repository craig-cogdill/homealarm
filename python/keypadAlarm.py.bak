#!/usr/bin/env python2.7
from pad4pi import rpi_gpio
import time
import RPi.GPIO as GPIO

ALARM_PIN = 23

KEYPAD = [
	   ["1","2","3","A"],
	   ["4","5","6","B"],
	   ["7","8","9","C"],
	   ["*","0","#","D"]
	 ]

COL_PINS=[4, 17, 27, 22]
ROW_PINS=[6, 13, 19, 26]

VALID_PASSWORD = "123ABC"
START_TIME = time.time()
PASSWORD = ""
SYSTEM_ARMED = True
ALARM_TRIGGERED = False
ALARM_TIMEOUT = 15

# Setup the alarm output pin
GPIO.setmode(GPIO.BCM)
GPIO.setup(ALARM_PIN, GPIO.OUT)
GPIO.output(ALARM_PIN, GPIO.LOW)


def triggerAlarm():
	global ALARM_TRIGGERED
	ALARM_TRIGGERED = True
        GPIO.output(ALARM_PIN, GPIO.HIGH)	
	print("SYSTEM ALARM IS SOUNDING!!!")

def resetAlarm():
	GPIO.output(ALARM_PIN, GPIO.LOW)
	ALARM_TRIGGERED = False
	print("Alarm is reset")

def handleKeyPress(key):
	print(key)
	global PASSWORD, ALARM_TRIGGERED
	if (key == "#"):
		if (PASSWORD == VALID_PASSWORD):
			resetAlarm()
			global SYSTEM_ARMED
			SYSTEM_ARMED = False
			print("SYSTEM DISARMED!!")
		else:	
			print("INVALID PASSWORD!!")
			PASSWORD = ""
	else:
		PASSWORD += key

try:
	factory = rpi_gpio.KeypadFactory()

	keypad = factory.create_keypad(keypad=KEYPAD, row_pins=ROW_PINS, col_pins=COL_PINS)

	keypad.registerKeyPressHandler(handleKeyPress)

	print("You have 15 seconds to input a valid password...")


	# TODO - Break out of the while loop if timer is interrupted
	#      - Find some way to reset the system

	# main loop. We must do this forever so that the alarm 
	#   can be reset
	while True:

		while (ALARM_TRIGGERED == False and SYSTEM_ARMED == True):
			TIME_NOW = time.time()
			if (TIME_NOW - START_TIME >= ALARM_TIMEOUT):
				triggerAlarm()	

except KeyboardInterrupt:
	print("goodbye")

finally:
	keypad.cleanup()
	GPIO.cleanup()


